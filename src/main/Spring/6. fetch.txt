[ 동기 vs 비동기 ]
- 프로그램에서 작업을 처리하는 방식
- 동기 : 여러 작업이 실행될 때, 작업 간의 실행을 순차적으로 처리
    -> 느리다. 무결성 중시 ex) 계좌이체(출금)
- 비동기 : 여러 작업이 실행될 때, 작업 간의 실행을 동시에 처리
    -> 빠르다. 무결성 무시 ex) 채팅

[ fetch ]
1. 정의 : JS에서 제공하는 내장 통신 함수
2. 역할 : HTTP 요청을 보내고 응답을 비동기적으로 처리
3. 사용법
    1) 비동기 방식 fetch : then을 이용한 체인 형식
    const func = ( ) => {
        fetch( URL, option )
            .then( response => response.json() )
            .then( data => { 실행문 } )
            .catch( error => { 실행문 } )
    }
    2) 동기 방식 fetch : async + await을 이용한 동기 형식, 권장하는 방법
    const func = async ( ) => {
        const response = await fetch( URL, option )
        const data = await response.json()
    }
4.
    - URL : Spring 프로젝트 내 통신할 Controller @XXXMapping에서 정의된 URL
        쿼리스트링 사용 시, 백틱 사용하여 구현
        주로 식별자가 쿼리스트링에 사용된다.
    - option
        GET / DELETE : { method : "GET/DELETE" }
        POST  /  PUT : { method : "POST/PUT",
                         headers : { "Content-Type" : "application/json" },
                         body : JSON.stringify( data ) }
    - then( response => response.json() ) : 응답 객체를 JSON 타입으로 변환
    - then( response => response.text() ) : 응답 객체를 문자 타입으로 변환 -> 거의 사용 X
    - then( data => { 실행문 } ) : 통신 결과를 받아 실행문 처리
    - catch( error => { 실행문 } ) : 통신에 에러가 발생했을 경우, 실행문 처리