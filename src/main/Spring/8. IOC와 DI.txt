[ IOC ] : Inversion Of Control(제어의 역전)
1. 의미 : 객체 생성 및 관리의 제어권을 개발자가 아닌 스프링가 담당한다.
2. 스프링에서 [컨테이너]가 이를 담당한다.
3. 목적 : 효율적이고 규칙적으로 객체를 관리 및 사용하기 위해서
    -> 여러 사람들이 비규칙적인 객체를 사용하면, 중복적인 객체 또는 객체 충돌이 발생할 수 있기 때문에
4. 주요 어노테이션
    1) @Component : 스프링 컨테이너(저장소)에 클래스 bean(객체, 정보)를 등록
        - @Component가 내장된 주요 어노테이션 : @Controller, @RestController, @Service, @Repository, @Configuration ···
        - 주로 MVC 패턴에서 사용 -> MVC 패턴은 IOC 기반이면서 스프링 필수 패턴


[ DI ] : Dependency Injection(의존성 주입)
1. 의미 : 객체를 직접 생성하지 않고 외부(스프링 컨테이너)로부터 주입받도록 하는 방법
2. 목적 : 객체들 간의 결합도(관계)를 낮추고, 유지보수성을 향상하기 위해서
3. 주요 어노테이션
    1) @Autowired : 스프링 컨테이너에 등록된 bean(객체, 정보)를 꺼내온다.

[ IOC / DI ]
- IOC와 DI를 사용하면, 싱글톤을 사용할 필요가 없어진다.